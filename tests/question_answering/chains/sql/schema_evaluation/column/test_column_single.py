import pytest

from ai.chains.sql.schema_evaluation.column.column_single import (
    SingleColumnEvaluateDescriptionChain,
)


TABLE_INFO = """CREATE TABLE retail (
	"Invoice" TEXT, 
	"StockCode" TEXT, 
	"Description" TEXT, 
	"Quantity" INTEGER, 
	"InvoiceDate" TEXT, 
	"UnitPrice" REAL, 
	"CustomerID" REAL, 
	"Country" TEXT
)

/*
3 rows from retail table:
Invoice	StockCode	Description	Quantity	InvoiceDate	UnitPrice	CustomerID	Country
489434	85048	15CM CHRISTMAS GLASS BALL 20 LIGHTS	12	12/1/2009 7:45	6.95	13085.0	United Kingdom
489434	79323P	PINK CHERRY LIGHTS	12	12/1/2009 7:45	6.75	13085.0	United Kingdom
489434	79323W	WHITE CHERRY LIGHTS	12	12/1/2009 7:45	6.75	13085.0	United Kingdom
*/"""

COL_EXAMPLES = "489434,489434,489434,489434,489434,489434,489434,489434,489435,489435,489435,489435,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489436,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489437,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489438,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489439,489440,489440,489441,489441,489441,489441,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489442,489443,489443,489443,489443,489443,489443,489443,489444,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489445,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489446,489447,489448,489448,489448,489448,C489449,C489449,C489449,C489449,C489449,C489449,C489449,C489449,C489449,489450,489450,489450,489450,489450,489450,489450,489450,489450,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,C489459,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489460,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489461,489462,489462,489461,489461,489461,489461,489461,489461,489462,489462,489462,489462,489462,489462,489462,489462,489462,489462,489462,489464,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489465,489463,489467,C489476,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,489488,C489503,C489503,C489504,489505,489505,489505,489505,489505,489505,489505,489505,489505,489505,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489514,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,489517,C489518,C489518,C489518,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489519,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489520,489521,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522,489522"


# The best mechanism for comming up with good examples from the table is probably to seek
# embeddings of the table some sort of clustering and then sample from modes of the clusters
# and rares.

# How about training a word2Vec for the column (where position doesnt matter)?


def test_SingleColumnEvaluateDescriptionChain_runs():
    from langchain.chat_models import ChatOpenAI

    model_name = "gpt-3.5-turbo"
    model = ChatOpenAI(model_name=model_name, temperature=0.0)

    chain = SingleColumnEvaluateDescriptionChain(llm=model)

    reply = chain.predict(
        table_name="retail",
        column_name=" Invoice",
        table_info=TABLE_INFO,
        column_extract=COL_EXAMPLES,
    )

    pass
